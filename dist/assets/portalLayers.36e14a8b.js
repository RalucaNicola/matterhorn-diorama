var S=Object.defineProperty,h=Object.defineProperties;var I=Object.getOwnPropertyDescriptors;var y=Object.getOwnPropertySymbols;var g=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var m=(e,r,a)=>r in e?S(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,u=(e,r)=>{for(var a in r||(r={}))g.call(r,a)&&m(e,a,r[a]);if(y)for(var a of y(r))w.call(r,a)&&m(e,a,r[a]);return e},p=(e,r)=>h(e,I(r));import{d5 as f,I as v}from"./index.165b2b59.js";import{a as T}from"./lazyLayerLoader.620e965d.js";import{f as M,h as i,m as $,n as o}from"./layersLoader.0a341885.js";import{s as L}from"./portalItemUtils.9b39c34e.js";import"./jsonContext.b2c6aeae.js";function Q(e){return!e.portalItem||e.portalItem instanceof f||(e=p(u({},e),{portalItem:new f(e.portalItem)})),P(e.portalItem).then(r=>{const a=u({portalItem:e.portalItem},r.properties);return new r.constructor(a)})}function P(e){return e.load().then(C).then(F)}function C(e){switch(e.type){case"Map Service":return j(e);case"Feature Service":return G(e);case"Feature Collection":return W(e);case"Scene Service":return K(e);case"Image Service":return b(e);case"Stream Service":return D();case"Vector Tile Service":return A();case"KML":return B();case"WFS":return V();case"WMTS":return x();case"WMS":return k();case"Feed":return O();default:return Promise.reject(new v("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function F(e){return(0,T[e.className])().then(r=>({constructor:r,properties:e.properties}))}function j(e){return R(e).then(r=>r?{className:"TileLayer"}:{className:"MapImageLayer"})}function G(e){return d(e).then(r=>{if(typeof r=="object"){const a={};return r.id!=null&&(a.layerId=r.id),{className:"FeatureLayer",properties:a}}return{className:"GroupLayer"}})}function K(e){return d(e).then(r=>{if(typeof r=="object"){const a={};let s;if(r.id!=null?(a.layerId=r.id,s=`${e.url}/layers/${r.id}`):s=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const t={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const n of Object.keys(t))if(e.typeKeywords.includes(n))return{className:t[n]}}return o(s).then(t=>{let n="SceneLayer";const c={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return t&&t.layerType&&c[t.layerType]&&(n=c[t.layerType]),{className:n,properties:a}})}return r===!1?o(e.url).then(a=>(a==null?void 0:a.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}):{className:"GroupLayer"}})}async function W(e){if(await e.load(),L(e,"Map Notes"))return{className:"MapNotesLayer"};if(L(e,"Route Layer"))return{className:"RouteLayer"};const r=await e.fetchData();return i(r)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function b(e){var r,a,s;await e.load();const t=(r=(a=e.typeKeywords)==null?void 0:a.map(N=>N.toLowerCase()))!=null?r:[];if(t.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(t.includes("tiled imagery"))return{className:"ImageryTileLayer"};const n=await e.fetchData(),c=n==null?void 0:n.layerType;return c==="ArcGISTiledImageServiceLayer"?{className:"ImageryTileLayer"}:c==="ArcGISImageServiceLayer"?{className:"ImageryLayer"}:((s=(await o(e.url)).cacheType)==null?void 0:s.toLowerCase())==="map"?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function D(){return{className:"StreamLayer"}}function A(){return{className:"VectorTileLayer"}}function B(){return{className:"KMLLayer"}}function V(){return{className:"WFSLayer"}}function k(){return{className:"WMSLayer"}}function x(){return{className:"WMTSLayer"}}function O(){return{className:"StreamLayer"}}function R(e){return o(e.url).then(r=>r.tileInfo)}function d(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then(()=>e.fetchData()).then(async r=>e.type==="Feature Service"?l(r=await M(r,e.url)):i(r)>0?l(r):o(e.url).then(l))}function l(e){return i(e)===1&&{id:$(e)}}export{Q as fromItem,C as selectLayerClassPath};
